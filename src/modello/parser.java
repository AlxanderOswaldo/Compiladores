
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 15 12:03:59 COT 2015
//----------------------------------------------------

package modello;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 15 12:03:59 COT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\003\000\002\003\006\000\002\003\005" +
    "\000\002\011\003\000\002\011\003\000\002\024\006\000" +
    "\002\005\003\000\002\005\003\000\002\006\005\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\003\000\002\010\003" +
    "\000\002\014\005\000\002\013\003\000\002\013\003\000" +
    "\002\012\005\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\036\010\000\002\036\007\000\002\036" +
    "\006\000\002\035\007\000\002\034\003\000\002\034\003" +
    "\000\002\022\010\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\025\005\000\002" +
    "\025\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\020\010\000\002\033\003" +
    "\000\002\033\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\006\003\004\051\005\001\002\000\004\002" +
    "\ufffe\001\002\000\004\004\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\007\011\001" +
    "\002\000\004\005\012\001\002\000\016\006\017\010\020" +
    "\011\014\012\013\021\016\032\015\001\002\000\004\007" +
    "\uffe8\001\002\000\004\007\uffe9\001\002\000\012\010\156" +
    "\011\155\012\160\021\157\001\002\000\004\007\uffe6\001" +
    "\002\000\034\004\056\007\064\013\062\014\152\016\072" +
    "\030\070\041\037\042\041\043\032\044\036\045\031\047" +
    "\035\051\076\001\002\000\004\007\uffea\001\002\000\004" +
    "\002\uffff\001\002\000\004\006\055\001\002\000\004\007" +
    "\024\001\002\000\006\024\027\040\030\001\002\000\016" +
    "\006\017\010\020\011\014\012\013\021\016\032\015\001" +
    "\002\000\016\006\ufff8\010\ufff8\011\ufff8\012\ufff8\021\ufff8" +
    "\032\ufff8\001\002\000\016\041\037\042\041\043\032\044" +
    "\036\045\031\047\035\001\002\000\016\006\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\021\ufff7\032\ufff7\001\002\000\036\014" +
    "\uffef\015\uffef\020\uffef\022\uffef\023\uffef\024\uffef\026\uffef" +
    "\027\uffef\033\uffef\034\uffef\037\uffef\040\uffef\046\uffef\050" +
    "\uffef\001\002\000\036\014\ufff1\015\ufff1\020\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\026\ufff1\027\ufff1\033\ufff1\034\ufff1\037" +
    "\ufff1\040\ufff1\046\ufff1\050\ufff1\001\002\000\036\014\ufff5" +
    "\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\026\ufff5\027" +
    "\ufff5\033\ufff5\034\ufff5\037\ufff5\040\ufff5\046\ufff5\050\ufff5" +
    "\001\002\000\004\040\050\001\002\000\016\041\037\042" +
    "\041\043\032\044\036\045\031\047\035\001\002\000\036" +
    "\014\ufff0\015\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\026" +
    "\ufff0\027\ufff0\033\ufff0\034\ufff0\037\ufff0\040\ufff0\046\ufff0" +
    "\050\ufff0\001\002\000\036\014\ufff3\015\ufff3\020\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\026\ufff3\027\ufff3\033\ufff3\034\ufff3" +
    "\037\ufff3\040\ufff3\046\ufff3\050\ufff3\001\002\000\036\014" +
    "\ufff4\015\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\026\ufff4" +
    "\027\ufff4\033\ufff4\034\ufff4\037\ufff4\040\ufff4\046\ufff4\050" +
    "\ufff4\001\002\000\036\014\ufff2\015\ufff2\020\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\026\ufff2\027\ufff2\033\ufff2\034\ufff2\037" +
    "\ufff2\040\ufff2\046\ufff2\050\ufff2\001\002\000\006\046\046" +
    "\050\uffed\001\002\000\004\050\uffec\001\002\000\004\050" +
    "\045\001\002\000\036\014\uffee\015\uffee\020\uffee\022\uffee" +
    "\023\uffee\024\uffee\026\uffee\027\uffee\033\uffee\034\uffee\037" +
    "\uffee\040\uffee\046\uffee\050\uffee\001\002\000\016\041\037" +
    "\042\041\043\032\044\036\045\031\047\035\001\002\000" +
    "\004\050\uffeb\001\002\000\016\006\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\021\ufff6\032\ufff6\001\002\000\004\006\ufffa\001" +
    "\002\000\004\006\ufffb\001\002\000\004\006\ufffd\001\002" +
    "\000\004\002\000\001\002\000\032\004\056\007\064\013" +
    "\062\016\072\030\070\041\037\042\041\043\032\044\036" +
    "\045\031\047\035\051\076\001\002\000\004\014\uffdb\001" +
    "\002\000\004\014\150\001\002\000\006\014\uffd1\040\uffd1" +
    "\001\002\000\004\014\uffe1\001\002\000\004\014\uffdf\001" +
    "\002\000\012\022\134\023\136\026\135\027\131\001\002" +
    "\000\014\022\134\023\136\024\132\026\135\027\131\001" +
    "\002\000\006\014\uffd2\040\uffd2\001\002\000\004\014\uffdd" +
    "\001\002\000\006\014\uffd0\040\uffd0\001\002\000\020\007" +
    "\110\041\037\042\041\043\032\044\036\045\031\047\035" +
    "\001\002\000\004\014\uffdc\001\002\000\020\007\110\041" +
    "\037\042\041\043\032\044\036\045\031\047\035\001\002" +
    "\000\006\014\uffd3\040\uffd3\001\002\000\004\014\uffe0\001" +
    "\002\000\004\014\uffde\001\002\000\004\052\077\001\002" +
    "\000\034\004\056\007\064\013\062\014\101\016\072\030" +
    "\070\041\037\042\041\043\032\044\036\045\031\047\035" +
    "\051\076\001\002\000\004\014\104\001\002\000\004\052" +
    "\102\001\002\000\034\004\056\007\064\013\062\014\uffd8" +
    "\016\072\030\070\041\037\042\041\043\032\044\036\045" +
    "\031\047\035\051\076\001\002\000\004\014\uffd9\001\002" +
    "\000\004\052\105\001\002\000\032\004\056\007\064\013" +
    "\062\016\072\030\070\041\037\042\041\043\032\044\036" +
    "\045\031\047\035\051\076\001\002\000\004\014\uffda\001" +
    "\002\000\020\015\uffc7\020\uffc7\024\uffc7\033\uffc7\034\uffc7" +
    "\037\uffc7\040\uffc7\001\002\000\020\015\uffc8\020\uffc8\024" +
    "\uffc8\033\uffc8\034\uffc8\037\uffc8\040\uffc8\001\002\000\016" +
    "\015\117\020\115\024\113\033\116\034\114\037\120\001" +
    "\002\000\020\007\110\041\037\042\041\043\032\044\036" +
    "\045\031\047\035\001\002\000\020\007\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\001\002\000\020" +
    "\007\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\047" +
    "\uffc4\001\002\000\020\007\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\047\uffc1\001\002\000\020\007\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\047\uffc5\001\002" +
    "\000\020\007\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\047\uffc6\001\002\000\020\007\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\047\uffc3\001\002\000\004\040" +
    "\122\001\002\000\032\004\056\007\064\013\062\016\072" +
    "\030\070\041\037\042\041\043\032\044\036\045\031\047" +
    "\035\051\076\001\002\000\004\014\uffc9\001\002\000\016" +
    "\015\117\020\115\024\113\033\116\034\114\037\120\001" +
    "\002\000\020\007\110\041\037\042\041\043\032\044\036" +
    "\045\031\047\035\001\002\000\004\040\127\001\002\000" +
    "\032\004\056\007\064\013\062\016\072\030\070\041\037" +
    "\042\041\043\032\044\036\045\031\047\035\051\076\001" +
    "\002\000\004\014\uffd4\001\002\000\020\007\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd\001\002\000" +
    "\020\007\141\041\037\042\041\043\032\044\036\045\031" +
    "\047\035\001\002\000\004\007\137\001\002\000\020\007" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc" +
    "\001\002\000\020\007\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\047\uffcb\001\002\000\020\007\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\047\uffca\001\002\000" +
    "\006\014\uffcf\040\uffcf\001\002\000\014\022\134\023\136" +
    "\026\135\027\131\040\uffd6\001\002\000\012\022\134\023" +
    "\136\026\135\027\131\001\002\000\004\040\uffd5\001\002" +
    "\000\004\040\144\001\002\000\032\004\056\007\064\013" +
    "\062\016\072\030\070\041\037\042\041\043\032\044\036" +
    "\045\031\047\035\051\076\001\002\000\004\014\uffd7\001" +
    "\002\000\016\041\037\042\041\043\032\044\036\045\031" +
    "\047\035\001\002\000\006\014\uffce\040\uffce\001\002\000" +
    "\004\004\151\001\002\000\006\002\ufff9\006\ufff9\001\002" +
    "\000\004\004\153\001\002\000\004\006\ufffc\001\002\000" +
    "\004\007\uffe7\001\002\000\004\007\uffe4\001\002\000\004" +
    "\007\uffe5\001\002\000\004\007\uffe2\001\002\000\004\007" +
    "\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\021\004\022\024" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\153\001\001\000\002\001\001\000\034\007\062\010" +
    "\037\014\032\016\056\020\060\022\073\025\072\026\064" +
    "\027\057\030\066\032\074\035\065\036\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\053\001\001" +
    "\000\002\001\001\000\006\005\024\006\025\001\001\000" +
    "\012\003\051\004\022\011\052\024\050\001\001\000\002" +
    "\001\001\000\010\007\033\010\037\014\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\041\010\037\012" +
    "\042\013\043\014\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\041\010\037\012\042\013\046\014\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\007\062\010\037\014\032\016\056\020\060\022\073" +
    "\025\072\026\064\027\057\030\066\032\074\035\065\036" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\145\001\001\000\004\031\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\106\010" +
    "\037\014\032\033\123\001\001\000\002\001\001\000\012" +
    "\007\106\010\037\014\032\033\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\007\062\010\037\014\032\016\077\020\060\022" +
    "\073\025\072\026\064\027\057\030\066\032\074\035\065" +
    "\036\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\007\062\010\037\014\032\016\102\020\060\022\073" +
    "\025\072\026\064\027\057\030\066\032\074\035\065\036" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\062\010\037\014\032\016\105\020\060\022\073\025" +
    "\072\026\064\027\057\030\066\032\074\035\065\036\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\111\001\001\000\012\007\106\010\037" +
    "\014\032\033\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\062\010" +
    "\037\014\032\016\122\020\060\022\073\025\072\026\064" +
    "\027\057\030\066\032\074\035\065\036\070\001\001\000" +
    "\002\001\001\000\004\023\124\001\001\000\012\007\106" +
    "\010\037\014\032\033\125\001\001\000\002\001\001\000" +
    "\034\007\062\010\037\014\032\016\127\020\060\022\073" +
    "\025\072\026\064\027\057\030\066\032\074\035\065\036" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\137\010\037\014\032\025\072\026\064\027\057\030" +
    "\066\032\141\034\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\145\001\001\000\004\031\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\062\010" +
    "\037\014\032\016\144\020\060\022\073\025\072\026\064" +
    "\027\057\030\066\032\074\035\065\036\070\001\001\000" +
    "\002\001\001\000\010\007\146\010\037\014\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String mensaje_error="Código fuente sin errores...";
    public void syntax_error(Symbol st){
        token t=(token)st.value;
        mensaje_error = "Error Sintactico en : linea: "+(t.getX()+1)+ "\t" +"columna: "+t.getY()+ "\t" +"caracter: "+t.getValor();
        //report_error("Error Sintactico:"+ t.getValor()+"- "+t.getX()+"-"+t.getY(),null);
    }
public void sintactico(){
CUP$parser$actions r= new CUP$parser$actions(this);
    for (int i = 0; i < r.at.size(); i++) {
        System.out.println(r.at.get(i));
    }
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



       ArrayList<String> at= new ArrayList<>();
    public void ImprimeValor(String str){
        System.out.println("elr del token"+str) ;
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comparacion ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparacion ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparacion ::= MAYORIG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparacion ::= MENORIG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comparacion ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparacion ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // idvalor ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idvalor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // idvalor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idvalor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mientras ::= MIENTRAS idvalor comparacion idvalor PCOMA pgrm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // signos ::= DIVIDENDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // signos ::= POR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // signos ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // signos ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // suma ::= valor signos valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suma",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // suma ::= ID signos ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suma",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacion ::= div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacion ::= mult 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operacion ::= resta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operacion ::= suma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // si ::= SI idvalor comparacion idvalor PCOMA pgrm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valorop ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valorop ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignar ::= ID IGUAL valorop PCOMA pgrm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ciclo ::= INICIO CICLO FIN CICLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ciclo ::= INICIO CICLO FIN CICLO pgrm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ciclo ::= INICIO CICLO pgrm FIN CICLO pgrm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pgrm ::= PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgrm",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pgrm ::= ciclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgrm",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pgrm ::= asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgrm",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pgrm ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgrm",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // pgrm ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgrm",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pgrm ::= si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgrm",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pgrm ::= mientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgrm",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tdato ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tdato",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tdato ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tdato",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tdato ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tdato",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tdato ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tdato",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var ::= VECTOR tdato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sg ::= valor COMA vc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sg",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vc ::= sg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vc ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vector ::= PARENA vc PARENC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bln ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bln",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bln ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bln",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor ::= DCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor ::= NDECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valor ::= NENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valor ::= bln 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valor ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // iv ::= IGUAL valor PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iv",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // igpc ::= PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("igpc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // igpc ::= iv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("igpc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= ESTRUCTURA pgrm FIN PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // findeclaracion ::= cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("findeclaracion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // findeclaracion ::= variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("findeclaracion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variables ::= ESTRUCTURA FIN PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variables ::= var ID igpc findeclaracion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error sintactico en la sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO PROGRAMA ID DECLARACIONES cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIO PROGRAMA ID DECLARACIONES variables cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

